class Solution {
public:
    vector<vector<int>> generateMatrix(int n) {
        //初始化n * n二维动态数组，初始化值为0
        vector<vector<int>> res(n, vector<int>(n, 0)); // 使用vector定义一个二维数组，初始化为n个vector，这n个vector又通过n个0来初始化
        int x,y=0;//每一圈起始坐标，第一圈从（0，0）开始赋值，第二圈从（1，1）开始赋值，第三圈从（2，2）开始赋值
        int now_x,now_y=0;//现在正在赋值的坐标点
        int turns=n/2;//需要循环的圈数
        int num=1;//给二维数组赋值
        int offset=1;//控制每一圈里面每一个循环的长度
        while(turns--){//先进行循环再将turns的值-1
            //均是左闭右开
            for(now_y=y;now_y<y+n-offset;now_y++){//起点从y开始，那终点也应该加上y
                res[x][now_y]=num++;//从左到右进行赋值
            }

            for(now_x=x;now_x<x+n-offset;now_x++){
                res[now_x][now_y]=num++;//从上到下进行赋值
            }

            for(;now_y>y;now_y--){//注意这里的判断条件是大于y
                res[now_x][now_y]=num++;//从右到左进行赋值
            }

            for(;now_x>x;now_x--){
                res[now_x][now_y]=num++;//从下到上赋值
            }

            x++;
            y++;
            offset+=2;//第二圈比第一圈的边长小2
        }

        //判断n是否为奇数，奇数需要对最中心的值单独赋值
        if(n%2==1){
            res[n/2][n/2]=n*n;
        }
        return res;

    }
    };
class Solution {
public:
    vector<vector<int>> generateMatrix(int n) {
        //初始化n * n二维动态数组，初始化值为0
        vector<vector<int>> res(n, vector<int>(n, 0)); // 使用vector定义一个二维数组，初始化为n个vector，这n个vector又通过n个0来初始化
        int x,y=0;//每一圈起始坐标，第一圈从（0，0）开始赋值，第二圈从（1，1）开始赋值，第三圈从（2，2）开始赋值
        int now_x,now_y=0;//现在正在赋值的坐标点
        int turns=n/2;//需要循环的圈数
        int num=1;//给二维数组赋值
        int offset=1;//控制每一圈里面每一个循环的长度
        while(turns--){//先进行循环再将turns的值-1
            //均是左闭右开
            for(now_y=y;now_y<y+n-offset;now_y++){//起点从y开始，那终点也应该加上y
                res[x][now_y]=num++;//从左到右进行赋值
            }

            for(now_x=x;now_x<x+n-offset;now_x++){
                res[now_x][now_y]=num++;//从上到下进行赋值
            }

            for(;now_y>y;now_y--){//注意这里的判断条件是大于y
                res[now_x][now_y]=num++;//从右到左进行赋值
            }

            for(;now_x>x;now_x--){
                res[now_x][now_y]=num++;//从下到上赋值
            }

            x++;
            y++;
            offset+=2;//第二圈比第一圈的边长小2
        }

        //判断n是否为奇数，奇数需要对最中心的值单独赋值
        if(n%2==1){
            res[n/2][n/2]=n*n;
        }
        return res;

    }
    };



class Solution {
public:
    vector<vector<int>> generateMatrix(int n) {
        //n为偶数，中间没有单独的
        //(n+1)/2圈
        vector<vector<int>> result(n,vector<int>(n,0));
        int turns=(n+1)/2;
        int y=0;
        int x=0;
        int num=1;
        for(int i=0;i<turns;i++){//i为起点坐标（i，i）
            //从左到右
            for(y=i;y<n-1-i;y++){//n-1-i为终点
                result[i][y]=num++;
            }

            //从上到下
            for(x=i;x<n-1-i;x++){
                result[x][y]=num++;
            }
            //从右到左
            for(y;y>i;y--){
                result[x][y]=num++;
            }
            //下到上
            for(x;x>i;x--){
                result[x][y]=num++;
            }
        }
        if(n%2==1) result[n/2][n/2]=num;
        return result;
    }
};




#######################################problem_54##############################################################################
class Solution {
public:
    vector<int> spiralOrder(vector<vector<int>>& matrix) {
        int m=matrix.size();
        int n=matrix[0].size();
        vector<int> nums(m*n,0);//返回的一维数组
        int turns=min(m,n)/2;//循环的圈数
        int x,y=0;//每一圈起始坐标
        int i,j=0;//当前正在返回的元素的坐标
        int offset=1;
        int k=0;//记录一维数组的下标
        while(turns--){
            for(j=y;j<y+n-offset;j++){
                nums[k++]=matrix[x][j];//从左到右赋值
            }

            for(i=x;i<x+m-offset;i++){
                nums[k++]=matrix[i][j];//从上到下赋值
            }

            for(j;j>y;j--){
                nums[k++]=matrix[i][j];//从右到左赋值
            }

            for(i;i>x;i--){
                nums[k++]=matrix[i][j];//从下到上赋值
            }

            x++;
            y++;
            offset+=2;
        }
        
        //中间的数需要单独输出，需要输出max-min+1个数
        //判断是行数大于列数还是列数大于行数，两种情况不一样
        if(min(m,n)%2==1){
            int res=max(m,n)-min(m,n)+1;
            if(m>n){
                for(int p=0;p<res;p++){
                nums[k++]=matrix[x+p][y];
                }
            }
            else{
                for(int p=0;p<res;p++){
                nums[k++]=matrix[x][p+y];
                }
            }
           
        }

        return nums;

    }
};


class Solution {
public:
    vector<int> spiralOrder(vector<vector<int>>& matrix) {
        vector<int> result;
        int m=matrix.size();
        if(m==0) return result;
        int n=matrix[0].size();
        int x=0;
        int y=0;
        int turns=min(m,n)/2;
        for(int i=0;i<turns;i++){
            for(y=i;y<n-1-i;y++) result.push_back(matrix[i][y]);
            for(x=i;x<m-1-i;x++) result.push_back(matrix[x][y]);
            for(y;y>i;y--) result.push_back(matrix[x][y]);
            for(x;x>i;x--) result.push_back(matrix[x][y]);
        }
        if(min(m,n)%2==1){
            int index=turns;
            if(m>n){//竖着
                for(int i=0;i<m-n+1;i++){
                    result.push_back(matrix[index++][turns]);
                }
            }
            else{
                for(int i=0;i<n-m+1;i++){
                    result.push_back(matrix[turns][index++]);
                }
            }
        }
        return result;
    }
};












