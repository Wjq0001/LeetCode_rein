###########################################################################################Binary_search######################################
class Solution(object)
    def search(self, nums ,target):

    right,left=len(nums),0
    while left < right:
          key = (right+left)/2
          if nums[key] < target:
              left=key+1
          if nums[key] > target:
              right=key-1
          else:
              return key
    return -1


class Solution(object)
    def search(self, nums, target):

        right,left=len[nums]-1,0
        whle left<=right:
            key=(right+left)/2
            if nums[key]<target:
                left=key+1
            if nums[key]>target:
                right=key-1
            else:
                return key
        return -1

if _name_=="_main_":
  solution=Solution()
  nums = [1, 2, 5, 7, 9]
  target = 5
  result=solution.search(nums,target)
  print("Index of target:", result)
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include <vector>

class Solution {
public:
        int search(vector(int)& nums. int target) {
                int k=nums.size();
                int left=0;
                int right=k-1;
                whlle(left<=right){
                        int mid=(left+right)/2;
                        if(nums[mid] > target){
                            right=mid-1;
                        }
                        else if(nums[mid] < target){
                            left=mid-1;
                        }
                        else
                            return mid;
                }
                return -1;
        }
};

int main(){
    Solution solution;
    std::vector<int> nums = {-1 ,0 ,3 ,9 ,12 };
    int target =9;

    int result = solution.search(nums, target);
    if (result != -1) {
        std::cout << "Fouund " << target << " st index " << result << std::endl;
    } else {
        std::cout << target << " not  found in the array." << std::endl;
    }
    return 0;
}


#######################################################################################problem_35########################################################
class Solution {
public:
        int searchInsert(vector<int>& nums, int target){
            for (int i = 0; i < nums.size(); i++){

                if (nums[i] >= target){
                    return iï¼›
}
}
            return nums.size();
                }
}


class Solution(object)
    def searchInsert (self , nums , target)
        left,right=0,len(nums)-1
        while left<=right:
            mid=(left+right)/2
            if nums[mid]<target:
                left=mid+1
            elif nums[mid]>target:
                right=mid-1
            else:
                return mid

        if nums[0]>target:
            return 0
        elif nums[len(nums)-1]<target:
            return len(nums)
        else:
            for i in range(len(nums)):
                if nums[i]<target<nums[i+1]:
                    return i+1


class Solution {
public:
        int searchInsert(vector<int>& nums, int target)
          int left=0;
          int right=nums.size()-1;

          if(nums[0]>target)
            return 0;

          if(nums[right]<target)
            return right+1;

}
