###########################################################################################Binary_search######################################
class Solution(object)
    def search(self, nums ,target):

    right,left=len(nums),0
    while left < right:
          key = (right+left)/2
          if nums[key] < target:
              left=key+1
          if nums[key] > target:
              right=key-1
          else:
              return key
    return -1


class Solution(object)
    def search(self, nums, target):

        right,left=len[nums]-1,0
        whle left<=right:
            key=(right+left)/2
            if nums[key]<target:
                left=key+1
            if nums[key]>target:
                right=key-1
            else:
                return key
        return -1

if _name_=="_main_":
  solution=Solution()
  nums = [1, 2, 5, 7, 9]
  target = 5
  result=solution.search(nums,target)
  print("Index of target:", result)
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include <vector>

class Solution {
public:
        int search(vector(int)& nums. int target) {
                int k=nums.size();
                int left=0;
                int right=k-1;
                whlle(left<=right){
                        int mid=(left+right)/2;
                        if(nums[mid] > target){
                            right=mid-1;
                        }
                        else if(nums[mid] < target){
                            left=mid-1;
                        }
                        else
                            return mid;
                }
                return -1;
        }
};

int main(){
    Solution solution;
    std::vector<int> nums = {-1 ,0 ,3 ,9 ,12 };
    int target =9;

    int result = solution.search(nums, target);
    if (result != -1) {
        std::cout << "Fouund " << target << " st index " << result << std::endl;
    } else {
        std::cout << target << " not  found in the array." << std::endl;
    }
    return 0;
}


#######################################################################################problem_35########################################################
class Solution {
public:
        int searchInsert(vector<int>& nums, int target){
            for (int i = 0; i < nums.size(); i++){

                if (nums[i] >= target){
                    return iï¼›
}
}
            return nums.size();
                }
}


class Solution(object)
    def searchInsert (self , nums , target)
        left,right=0,len(nums)-1
        while left<=right:
            mid=(left+right)/2
            if nums[mid]<target:
                left=mid+1
            elif nums[mid]>target:
                right=mid-1
            else:
                return mid

        if nums[0]>target:
            return 0
        elif nums[len(nums)-1]<target:
            return len(nums)
        else:
            for i in range(len(nums)):
                if nums[i]<target<nums[i+1]:
                    return i+1


class Solution {
public:
        int searchInsert(vector<int>& nums, int target)
          int left=0;
          int right=nums.size()-1;

          if(nums[0]>target)
            return 0;

          if(nums[right]<target)
            return right+1;

          while(left<=right){
                int mid=(left+right)/2;
                if(nums[mid] < target){
                    left=mid+1;
                }
                else if(nums[mid] >= target){
                    right=mid-1;
                }
          }
          return left;
}
};



class Solution{
public:
    int searchInsert(vector<int>& nums, int target){
        int left=0;
        int right=nums.size()-1;
        while(left<=right){
            int mid=(left+right)/2;
            if(nums[mid]<target){
                left=mid+1;
            }
            else if(nums[mid]>target){
                right=mid-1;
            }
            else return mid;
    }
return right+1;
}
};


#######################################################################################problem_34########################################################
class Solution {
public:
    int searchLeft(vector<int>& nums, int target){
        int left=0;
        int right=nums.size()-1;
        while(left<=right){
            int mid=left+(right-left)/2;
            if(nums[mid]>=target){
                    right=mid-1;
            }
            else{
                left=mid+1;
            }
        }
return left;
}

    int searchright(vector<int>& nums, int target){
        int left=0;
        int right=nums.size()-1;
        while(left<=right){
            int mid=left+(right-left)/2;
            if(nums[mmid]<=target){
                    left=mid+1;
            }
            if(nums[mid]>target){
                    right=mid-1;
            }
        }
        return right;
    }

    vector<int> searchRange(vector<int>& nums, int target)
        int left=searchLeft(nums,target);
        int right=searchright(nums,target);
        if(right-left>=0) return (left,right);
        else return {-1,-1};

    }
};

class Solution{
public:
    vector<int> searchRange(vector<int>& nums, int target)
        int left=0;
        int right=nums.size()-1;
        int mid=0;
        while(left<=right){
            mid=(left+right)/2;
            if(nums[mid]>target) right=mid-1;
            else if(nums[mid]<target) left=mid+1;
            else break;
        }
        if(left>right) return {-1,-1};

        for(int i=mid;i>=0;i--){
            if(nums[i]==nums[mid]) right=i;
            else break;
        }
        for(int i=mid;i<nums.size();i++){
            if(nums[i]==nums[mid]) right=i;
            else break;
        }
        return {left,right};
}
};


class Solution(object):
    def searchRange(self, nums, target)
        def binlookTarget(nums,target):
            left,right=0,len(nums)-1]
            while left<=right:
                mid=(left+right)/2
                if nums[mid] < target:
                    left=mid+1
                elif nums[mid] > target:
                    right=mid-1
                else:
                    return mid-+
                 return -1
            s1=s2=binlookTarget(nums,target)

            if s1==-1:
                return [-1,-1]
            else :


            while s1-1>=0 and nums[s1-1]==target:
                s1-=1
            while s2+1<len(nums) and nums[s2+1]==target:
                s2+=1
            return [s1,s2]

#######################################################################################problem_69########################################################
class SOlution(object):
    def mySqrt(self,x):
        left,right=0,x
        ans=0
        while left<=right:
            mid=(right+left)/2
            if mid*mid > x:
                right=mid-1
            else:
                left=mid+1
                ans=mid
        return ans

class Solution(object)
    def mySqrt(self, x)
        left,right=0,x

        if x==1:
            return 1
        else:
            while left<=right:
                mid=(right+left)/2
                if mid*mid > x:
                    right=mid
                    if left==right-1:

                        return left
                elif mid*id < x:
                    left=mid

                    if left==right-1:

                        return left
                    else:
                        return mid



class Solution {
public:
        int mySqrt(int x){
            int l=0, r=x, ans=-1;
            while (l <= r){
                long mid = l+(r-1)/2


                long long k=mid*mid;
                if (k <= x){
                    ans = mid;
                    l = mid + 1;
                } else {
                    r = mid - 1;
                }
            }
        return ans;
        }
};


class Solution{
public:
    int mySqrt(int x)  {
        int left=0;
        int right=x;
        if(x==0){
            return 0;
        }
        if(x==1){
            return 1;
        }

        while(left <= right){
            int mid=left+(right-left)/2;
            if(mid<x/mid){
                left=mid+1;
            }
            else if(mid>x/mid){
                right=mid-1;
        }
            else return mid;
    }
};

#######################################################################################problem_367########################################################
class Solution(object):

    def isPerfectSquare(self, num):
        left,right=1,num
        while left<=right:

            mid=(left+right)/2
            if mid*mid>num:
                right=mid-1
            elif mid*mid<num:
                left=mid+1
            else:
                return R=True
        return False



class Solution {
public:
    bool isPerfectSquare(int num) {
        int left=1;
        int right=num;
        if(num==1) return true;
        while(left<=right){
            long m=left+(right-left)/2;
            if(m*m<num){
                left=m+1;
            }
            else if(m*M>num){
                    right=m-1;
            }
            else return true;
        }
        return false;
    }
};





